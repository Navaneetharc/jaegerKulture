<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<%- include('../partials/adminL/header.ejs') %>

<aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="/admin" class="brand-wrap">
                <img src="/assets/imgs/theme/jaeger.png" class="logo" alt="Jaeger Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item">
                    <a class="menu-link" href="/admin"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/users"> <i class="icon material-icons md-person"></i>
                        <span class="text">Customers</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/products"> <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/orders"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/category"> <i class="icon material-icons md-store"></i>
                        <span class="text">Category</span>
                    </a>
                </li>
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/coupons"> <i class="icon material-icons md-local_offer"></i>
                        <span class="text">Coupons</span>
                    </a>
                </li>
               
                <li class="menu-item">
                    <a class="menu-link" href="/admin/sales"> <i class="icon material-icons md-assessment"></i>
                        <span class="text">Sales Report</span>
                    </a>
                </li>
              
            </ul>
            <hr>
           
        </nav>
    </aside>

    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
               
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i class="material-icons md-cast"></i></a>
                    </li>
                    
                    
                </ul>
            </div>
        </header>


        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title">Coupons List</h2>
                </div>
                <div>
                    <form action="/admin/coupons" method="GET" class="d-flex">
                        <input type="text" name="search" placeholder="Search Coupons" class="form-control bg-white">
                        <button type="submit" class="btn btn-primary ms-2">Search</button>
                    </form>
                </div>
            </div>
        
            <!-- Flash Messages -->
            <!-- <% if (success) { %>
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <%= success %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>
        
            <% if (error) { %>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= error %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %> -->
        
            <div class="card mb-4">
                <header class="card-header">
                    <div class="row">
                        <div class="col-md-12 text-end">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                                <i class="material-icons md-plus"></i> Add New Coupon
                            </button>
                        </div>
                    </div>
                </header>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>SL No</th>
                                    <th>Coupon Name</th>
                                    <th>Coupon Code</th>
                                    <th>Start Date</th>
                                    <th>Expiry Date</th>
                                    <th>Min Price</th>
                                    <th>Offer Price</th>
                                    <th>Used</th>
                                    <th>Status</th>
                                    <th class="text-end">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (coupons && coupons.length > 0) { %>
                                    <% coupons.forEach((coupon, index) => { %>
                                        <tr>
                                            <td><%= index + 1 %></td>
                                            <td><%= coupon.name %></td>
                                            <td><strong><%= coupon.code %></strong></td>
                                            <td><%= new Date(coupon.startDate).toLocaleDateString() %></td>
                                            <td><%= new Date(coupon.expiryDate).toLocaleDateString() %></td>
                                            <td>₹<%= coupon.minPrice %></td>
                                            <td>₹<%= coupon.offerPrice %></td>
                                            <td><%= coupon.used %></td>
                                            <td>
                                                <% if (coupon.status === 'Active') { %>
                                                    <span class="badge bg-success">Active</span>
                                                <% } else if (coupon.status === 'Inactive') { %>
                                                    <span class="badge bg-warning">Inactive</span>
                                                <% } else if (new Date(coupon.expiryDate) < new Date()) { %>
                                                    <span class="badge bg-danger">Expired</span>
                                                <% } %>
                                            </td>
                                            <td class="text-end">
                                                <div class="dropdown">
                                                    <a href="#" data-bs-toggle="dropdown" class="btn btn-light rounded btn-sm font-sm"> 
                                                        <i class="material-icons md-more_horiz"></i> 
                                                    </a>
                                                    <div class="dropdown-menu">
                                                        <a class="dropdown-item" href="#" onclick="openEditModal('<%= coupon._id %>', '<%= coupon.name %>', '<%= coupon.code %>', '<%= coupon.description %>', '<%= coupon.startDate %>', '<%= coupon.expiryDate %>', '<%= coupon.minPrice %>', '<%= coupon.offerPrice %>', '<%= coupon.usageType %>', '<%= coupon.status %>')">Edit</a>
                                                        <% if (coupon.status === 'Active') { %>
                                                            <a class="dropdown-item text-danger" href="#" onclick="confirmDeactivate('<%= coupon._id %>', '<%= coupon.code %>')">Deactivate</a>
                                                        <% } else { %>
                                                            <a class="dropdown-item text-success" href="#" onclick="confirmActivate('<%= coupon._id %>', '<%= coupon.code %>')">Activate</a>
                                                        <% } %>
                                                        <a class="dropdown-item text-danger" href="#" onclick="confirmDelete('<%= coupon._id %>', '<%= coupon.code %>')">Delete</a>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="10" class="text-center">No coupons found</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        
            <!-- Pagination (if needed) -->
            <% if (coupons && coupons.length > 0) { %>
                <div class="pagination-area mt-15 mb-50">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-start">
                            <li class="page-item">
                                <a class="page-link" href="#">
                                    <i class="material-icons md-chevron_left"></i>
                                </a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">01</a></li>
                            <li class="page-item"><a class="page-link" href="#">02</a></li>
                            <li class="page-item"><a class="page-link" href="#">03</a></li>
                            <li class="page-item">
                                <a class="page-link" href="#">
                                    <i class="material-icons md-chevron_right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            <% } %>
        </section>

        <% if (success) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
              <%= success %>
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
          <% } %>
        
        
        <!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <!-- Single form without nesting -->
        <form id="addCouponForm" action="/admin/coupons" method="POST" class="needs-validation" novalidate>
          <div class="modal-header">
            <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="couponName" class="form-label">Coupon Name <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="couponName" name="name" required>
                <div class="invalid-feedback">Please enter a coupon name.</div>
              </div>
              <div class="col-md-6">
                <label for="couponCode" class="form-label">Coupon Code <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="couponCode" name="code" pattern="[A-Z0-9]{3,10}" required>
                <div class="form-text">Unique code (e.g., SUMMER25; 3–10 uppercase letters/digits)</div>
                <div class="invalid-feedback">Please enter a valid coupon code.</div>
              </div>
            </div>
  
            <div class="mb-3">
              <label for="couponDescription" class="form-label">Coupon Description</label>
              <textarea class="form-control" id="couponDescription" name="description" rows="3"></textarea>
            </div>
  
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="startDate" class="form-label">Start Date <span class="text-danger">*</span></label>
                <input type="date" class="form-control" id="startDate" name="startDate" required>
                <div class="invalid-feedback">Please select a start date.</div>
              </div>
              <div class="col-md-6">
                <label for="expiryDate" class="form-label">Expiry Date <span class="text-danger">*</span></label>
                <input type="date" class="form-control" id="expiryDate" name="expiryDate" required>
                <div class="invalid-feedback">Please select an expiry date.</div>
              </div>
            </div>
  
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="minPrice" class="form-label">Minimum Price (₹) <span class="text-danger">*</span></label>
                <input type="number" class="form-control" id="minPrice" name="minPrice" min="0" required>
                <div class="form-text">Minimum order value required</div>
                <div class="invalid-feedback">Enter a non-negative minimum price.</div>
              </div>
              <div class="col-md-6">
                <label for="offerPrice" class="form-label">Offer Price (₹) <span class="text-danger">*</span></label>
                <input type="number" class="form-control" id="offerPrice" name="offerPrice" min="0" required>
                <div class="form-text">Discount amount provided</div>
                <div class="invalid-feedback">Enter a non-negative offer price.</div>
              </div>
            </div>
  
            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label">Use Type <span class="text-danger">*</span></label>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="usageType" id="singleUse" value="single" checked required>
                  <label class="form-check-label" for="singleUse">Single Use</label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="usageType" id="reusable" value="reusable" required>
                  <label class="form-check-label" for="reusable">Reusable</label>
                </div>
                <div class="invalid-feedback">Select a use type.</div>
              </div>
              <div class="col-md-6">
                <label class="form-label">Status <span class="text-danger">*</span></label>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="status" id="statusActive" value="active" checked required>
                  <label class="form-check-label" for="statusActive">Active</label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="status" id="statusInactive" value="inactive" required>
                  <label class="form-check-label" for="statusInactive">Inactive</label>
                </div>
                <div class="invalid-feedback">Select a status.</div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Save Coupon</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Edit Coupon Modal -->
<!-- Edit Coupon Modal -->
<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <form id="editCouponForm" action="/admin/coupons/update" method="POST" class="needs-validation" novalidate>
        <input type="hidden" id="editCouponId" name="couponId">
        <div class="modal-header">
          <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="editCouponName" class="form-label">Coupon Name <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="editCouponName" name="name" required>
              <div class="invalid-feedback">Please enter a coupon name.</div>
            </div>
            <div class="col-md-6">
              <label for="editCouponCode" class="form-label">Coupon Code <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="editCouponCode" name="code" pattern="[A-Z0-9]{3,10}" required>
              <div class="form-text">Unique code (e.g., SUMMER25; 3–10 uppercase letters/digits)</div>
              <div class="invalid-feedback">Please enter a valid coupon code.</div>
            </div>
          </div>

          <div class="mb-3">
            <label for="editCouponDescription" class="form-label">Coupon Description</label>
            <textarea class="form-control" id="editCouponDescription" name="description" rows="3"></textarea>
          </div>

          <div class="row mb-3">
            <div class="col-md-6">
              <label for="editStartDate" class="form-label">Start Date <span class="text-danger">*</span></label>
              <input type="date" class="form-control" id="editStartDate" name="startDate" required>
              <div class="invalid-feedback">Please select a start date.</div>
            </div>
            <div class="col-md-6">
              <label for="editExpiryDate" class="form-label">Expiry Date <span class="text-danger">*</span></label>
              <input type="date" class="form-control" id="editExpiryDate" name="expiryDate" required>
              <div class="invalid-feedback">Please select an expiry date.</div>
            </div>
          </div>

          <div class="row mb-3">
            <div class="col-md-6">
              <label for="editMinPrice" class="form-label">Minimum Price (₹) <span class="text-danger">*</span></label>
              <input type="number" class="form-control" id="editMinPrice" name="minPrice" min="0" required>
              <div class="form-text">Minimum order value required</div>
              <div class="invalid-feedback">Enter a non-negative minimum price.</div>
            </div>
            <div class="col-md-6">
              <label for="editOfferPrice" class="form-label">Offer Price (₹) <span class="text-danger">*</span></label>
              <input type="number" class="form-control" id="editOfferPrice" name="offerPrice" min="0" required>
              <div class="form-text">Discount amount provided</div>
              <div class="invalid-feedback">Enter a non-negative offer price.</div>
            </div>
          </div>

          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label">Use Type <span class="text-danger">*</span></label>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="editUsageType" id="editSingleUse" value="single" required>
                <label class="form-check-label" for="editSingleUse">Single Use</label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="editUsageType" id="editReusable" value="reusable" required>
                <label class="form-check-label" for="editReusable">Reusable</label>
              </div>
              <div class="invalid-feedback">Select a use type.</div>
            </div>
            <div class="col-md-6">
              <label class="form-label">Status <span class="text-danger">*</span></label>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="editStatus" id="editStatusActive" value="active" required>
                <label class="form-check-label" for="editStatusActive">Active</label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="editStatus" id="editStatusInactive" value="inactive" required>
                <label class="form-check-label" for="editStatusInactive">Inactive</label>
              </div>
              <div class="invalid-feedback">Select a status.</div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Update Coupon</button>
        </div>
      </form>
    </div>
  </div>
</div>
  
  <script>
  (function() {
    'use strict';
    window.addEventListener('load', () => {
      const form = document.getElementById('addCouponForm');
      form.addEventListener('submit', e => {
        if (!form.checkValidity() || !validateDates()) {
          e.preventDefault();
          e.stopPropagation();
        }
        form.classList.add('was-validated');
      });
    });
  
    // Date validation function
    function validateDates() {
      const start = new Date(document.getElementById('startDate').value);
      const end = new Date(document.getElementById('expiryDate').value);
      if (end <= start) {
        alert('Expiry date must be after the start date.');
        return false;
      }
      return true;
    }
  
    // Reset the form whenever the modal closes
    const modalEl = document.getElementById('addCouponModal');
    modalEl.addEventListener('hidden.bs.modal', () => {
      const form = document.getElementById('addCouponForm');
      form.reset();
      form.classList.remove('was-validated');
    });
  
    // Set default dates for the form
    document.addEventListener('DOMContentLoaded', function() {
      if (document.getElementById('startDate')) {
        const today = new Date();
        const todayFormatted = today.toISOString().split('T')[0];
        
        // Set default start date to today
        document.getElementById('startDate').value = todayFormatted;
        
        // Set default expiry date to 30 days from now
        const expiry = new Date();
        expiry.setDate(expiry.getDate() + 30);
        const expiryFormatted = expiry.toISOString().split('T')[0];
        document.getElementById('expiryDate').value = expiryFormatted;
      }
    });
})();
  </script>

  <script>
    function openEditModal(couponId, name, code, description, startDate, expiryDate, minPrice, offerPrice, usageType, status) {
  // Set values in the edit form
  document.getElementById('editCouponId').value = couponId;
  document.getElementById('editCouponName').value = name;
  document.getElementById('editCouponCode').value = code;
  document.getElementById('editCouponDescription').value = description || '';
  
  // Format dates for date inputs (YYYY-MM-DD)
  const startDateObj = new Date(startDate);
  const expiryDateObj = new Date(expiryDate);
  
  document.getElementById('editStartDate').value = startDateObj.toISOString().split('T')[0];
  document.getElementById('editExpiryDate').value = expiryDateObj.toISOString().split('T')[0];
  
  document.getElementById('editMinPrice').value = minPrice;
  document.getElementById('editOfferPrice').value = offerPrice;
  
  // Set radio buttons for usage type
  if (usageType === 'single-use') {
    document.getElementById('editSingleUse').checked = true;
  } else {
    document.getElementById('editReusable').checked = true;
  }
  
  // Set radio buttons for status
  if (status === 'Active') {
    document.getElementById('editStatusActive').checked = true;
  } else {
    document.getElementById('editStatusInactive').checked = true;
  }
  
  // Open modal
  const editModal = new bootstrap.Modal(document.getElementById('editCouponModal'));
  editModal.show();
}

// Fix form submission and validation for edit form
document.addEventListener('DOMContentLoaded', function() {
  const updateCoupon = async (req, res) => {
  const { couponId } = req.body;
  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    if (req.xhr) {
      return res.status(400).json({
        success: false,
        message: errors.array()[0].msg
      });
    }
    return res.redirect(`/admin/coupons?error=${encodeURIComponent(errors.array()[0].msg)}`);
  }

  try {
    let { name, code, description, startDate, expiryDate, minPrice, offerPrice } = req.body;
    let usageType = req.body.editUsageType === 'single' ? 'single-use' : 'multi-use';
    let status = req.body.editStatus === 'active' ? 'Active' : 'Inactive';

    if (new Date(expiryDate) <= new Date(startDate)) {
      if (req.xhr) {
        return res.status(400).json({
          success: false,
          message: 'Expiry date must be after start date'
        });
      }
      return res.redirect(`/admin/coupons?error=${encodeURIComponent('Expiry date must be after start date')}`);
    }

    const updatedCoupon = await Coupon.findByIdAndUpdate(
      couponId,
      {
        name,
        code,
        description,
        startDate,
        expiryDate,
        minPrice,
        offerPrice,
        usageType,
        status
      },
      { new: true, runValidators: true }
    );

    if (!updatedCoupon) {
      if (req.xhr) {
        return res.status(404).json({
          success: false,
          message: 'Coupon not found'
        });
      }
      return res.redirect('/admin/coupons?error=Coupon not found');
    }

    console.log('Coupon updated:', updatedCoupon.code);
    
    // Always ensure we're sending a proper response for XHR requests
    if (req.xhr) {
      return res.status(200).json({
        success: true,
        message: `Coupon ${code} updated successfully!`,
        coupon: updatedCoupon
      });
    }
    
    return res.redirect('/admin/coupons?success=Coupon updated successfully');

  } catch (err) {
    console.error('Error updating coupon:', err);
    
    let errorMessage = 'Error updating coupon';
    if (err.code === 11000) {
      const field = Object.keys(err.keyValue)[0];
      errorMessage = `${field} already exists`;
    }
    
    if (req.xhr) {
      // Ensure we're sending a proper status code for errors
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }
    
    return res.redirect(`/admin/coupons?error=${encodeURIComponent(errorMessage)}`);
  }
}
});

// Date validation function for edit form
function validateEditDates() {
  const start = new Date(document.getElementById('editStartDate').value);
  const end = new Date(document.getElementById('editExpiryDate').value);
  if (end <= start) {
    Swal.fire({
      title: 'Invalid Dates!',
      text: 'Expiry date must be after the start date.',
      icon: 'warning',
      confirmButtonColor: '#3085d6'
    });
    return false;
  }
  return true;
}
  </script>
          
        
          
        

        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>
                    document.write(new Date().getFullYear())
                    </script> © jaegerKulture 
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">
                        All rights reserved
                    </div>
                </div>
            </div>
        </footer>
    </main>

    <script>
 // Updated add coupon form submission handler
document.addEventListener('DOMContentLoaded', function() {
  // Handle add coupon form submission
  const addCouponForm = document.getElementById('addCouponForm');
  if (addCouponForm) {
    addCouponForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (!addCouponForm.checkValidity() || !validateDates()) {
        e.stopPropagation();
        addCouponForm.classList.add('was-validated');
        return;
      }
      
      // Collect form data
      const formData = new FormData(addCouponForm);
      
      // Submit using fetch API
      fetch('/admin/coupons', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-Requested-With': 'XMLHttpRequest' // Add this line to indicate AJAX request
        },
        body: new URLSearchParams(formData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          // Show success message
          Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            confirmButtonColor: '#28a745'
          }).then(() => {
            window.location.reload();
          });
          
          // Close the modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('addCouponModal'));
          modal.hide();
        } else {
          // Show error message
          Swal.fire({
            title: 'Error!',
            text: data.message || 'An error occurred',
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong with the request. The coupon may have been saved, please refresh to check.',
          icon: 'warning',
          confirmButtonColor: '#ffc107'
        }).then(() => {
          window.location.reload(); 
        });
      });
      
      addCouponForm.classList.add('was-validated');
    });
  }
  
  // Handle edit coupon form submission
  const editForm = document.getElementById('editCouponForm');
  if (editForm) {
    editForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Form validation
      if (!editForm.checkValidity()) {
        e.stopPropagation();
        editForm.classList.add('was-validated');
        return;
      }
      
      // Validate dates
      if (!validateEditDates()) {
        return;
      }
      
      // Collect form data
      const formData = new FormData(editForm);
      
      // Submit using fetch API
      fetch('/admin/coupons/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-Requested-With': 'XMLHttpRequest' // Add this line to indicate AJAX request
        },
        body: new URLSearchParams(formData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          // Show success message
          Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            confirmButtonColor: '#28a745'
          }).then(() => {
            window.location.reload();
          });
          
          // Close the modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('editCouponModal'));
          if (modal) modal.hide();
        } else {
          // Show error message
          Swal.fire({
            title: 'Error!',
            text: data.message || 'An error occurred',
            icon: 'error',
            confirmButtonColor: '#dc3545'
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Notice',
          text: 'The request encountered an issue, but the coupon may have been updated. The page will refresh to confirm.',
          icon: 'warning',
          confirmButtonColor: '#ffc107'
        }).then(() => {
          window.location.reload(); // Refresh to show updated data
        });
      });
    });
  }

  // Process URL parameters for alerts
  const urlParams = new URLSearchParams(window.location.search);
  const success = urlParams.get('success');
  const error = urlParams.get('error');
  
  if (success) {
    Swal.fire({
      title: 'Success!',
      text: decodeURIComponent(success),
      icon: 'success',
      confirmButtonColor: '#28a745',
      timer: 3000
    });
  } else if (error) {
    Swal.fire({
      title: 'Error!',
      text: decodeURIComponent(error),
      icon: 'error',
      confirmButtonColor: '#dc3545',
      timer: 3000
    });
  }
  
  if (success || error) {
    const url = new URL(window.location.href);
    url.searchParams.delete('success');
    url.searchParams.delete('error');
    window.history.replaceState({}, '', url);
  }
  
  initializeDateValidation();
});

function validateDates() {
  const start = new Date(document.getElementById('startDate').value);
  const end = new Date(document.getElementById('expiryDate').value);
  
  if (end <= start) {
    Swal.fire({
      title: 'Invalid Dates!',
      text: 'Expiry date must be after the start date.',
      icon: 'warning',
      confirmButtonColor: '#3085d6'
    });
    return false;
  }
  return true;
}

function handleCouponOperation(url, successMessage) {
  fetch(url, {
    method: 'GET',
    headers: {
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      Swal.fire({
        title: 'Success!',
        text: data.message,
        icon: 'success',
        confirmButtonColor: '#28a745'
      }).then(() => {
        window.location.reload();
      });
    } else {
      Swal.fire({
        title: 'Error!',
        text: data.message,
        icon: 'error',
        confirmButtonColor: '#dc3545'
      });
    }
  })
  .catch(error => {
    Swal.fire({
      title: 'Error!',
      text: 'Something went wrong!',
      icon: 'error',
      confirmButtonColor: '#dc3545'
    });
    console.error('Error:', error);
  });
}

// Updated confirmation functions for activate, deactivate, and delete
function confirmActivate(couponId, couponCode) {
  Swal.fire({
    title: 'Activate Coupon',
    text: `Are you sure you want to activate coupon "${couponCode}"?`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonColor: '#28a745',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Yes, activate it!',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      handleCouponOperation(`/admin/coupons/activate/${couponId}`, `Coupon ${couponCode} activated successfully!`);
    }
  });
}

function confirmDeactivate(couponId, couponCode) {
  Swal.fire({
    title: 'Deactivate Coupon',
    text: `Are you sure you want to deactivate coupon "${couponCode}"?`,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, deactivate it!',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      handleCouponOperation(`/admin/coupons/deactivate/${couponId}`, `Coupon ${couponCode} deactivated successfully!`);
    }
  });
}

function confirmDelete(couponId, couponCode) {
  Swal.fire({
    title: 'Delete Coupon',
    text: `Are you sure you want to delete coupon "${couponCode}"? This action cannot be undone.`,
    icon: 'error',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      handleCouponOperation(`/admin/coupons/delete/${couponId}`, `Coupon ${couponCode} deleted successfully!`);
    }
  });
}

// Function to initialize date validation
function initializeDateValidation() {
  // Set default dates for the add coupon form
  if (document.getElementById('startDate')) {
    const today = new Date();
    const todayFormatted = today.toISOString().split('T')[0];
    
    document.getElementById('startDate').value = todayFormatted;
    
    const expiry = new Date();
    expiry.setDate(expiry.getDate() + 30);
    const expiryFormatted = expiry.toISOString().split('T')[0];
    document.getElementById('expiryDate').value = expiryFormatted;
  }
}
    </script>


    <script src="assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="assets/js/vendors/select2.min.js"></script>
    <script src="assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="assets/js/main.js" type="text/javascript"></script>
    <script>
        function confirmBlock(userId, userName) {
            Swal.fire({
                title: 'Block Customer',
                text: `Are you sure you want to block ${userName}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, block them!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/admin/blockCustomer?id=${userId}`;
                }
            });
        }

        function confirmUnblock(userId, userName) {
            Swal.fire({
                title: 'Unblock Customer',
                text: `Are you sure you want to unblock ${userName}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, unblock them!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/admin/unblockCustomer?id=${userId}`;
                }
            });
        }
    </script>
</body>

</html>